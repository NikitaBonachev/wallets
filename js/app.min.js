!function(){"use strict";angular.module("app",["app.router","app.core","app.users","app.detail","app.transactions","app.widgets"])}(),function(){"use strict";angular.module("app.core",["ui.router","app.router"])}(),function(){"use strict";angular.module("app.detail",["app.core"])}(),function(){"use strict";angular.module("app.router",["ui.router"])}(),function(){"use strict";angular.module("app.transactions",["app.core"])}(),function(){"use strict";angular.module("app.users",["app.core"])}(),function(){"use strict";angular.module("app.widgets",[])}(),function(){"use strict";function e(e){e.options.timeOut=4e3,e.options.positionClass="toast-top-right"}function t(e,t,a){a.config.$stateProvider=e,a.config.$urlRouterProvider=t;var s={ready:["dataservice",function(e){return e.ready()}]};a.config.resolveAlways=s}e.$inject=["toastr"],t.$inject=["$stateProvider","$urlRouterProvider","statehelperConfigProvider"];var a=angular.module("app.core");a.config(e),a.value("config",{}),a.config(t)}(),function(){"use strict";angular.module("app.core").constant("baseUrl","https://livedemo.xsolla.com/fe/test-task/baev").constant("transDateTimeFormat","YYYY-MM-DD HH:mm").constant("moment",moment).constant("toastr",toastr).constant("transTypes",[{name:"No selection"},{value:"payment",name:"Payment"},{value:"coupon",name:"Coupon"},{value:"inGamePurchase",name:"In game purchase"},{value:"internal",name:"Internal"},{value:"cancellation",name:"Cancellation"}]).constant("emailRegexp",new RegExp(["^","(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*",'|"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]','|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")',"@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}","(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:","(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]","|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)","\\])","$"].join("")))}(),function(){"use strict";function e(e,t,a){function s(t){function a(e){return e.data}var s=l(t);return e.get(v+"/users"+s).then(a).catch(p)}function i(t){function a(e){return e.data}return e.get(v+"/users/"+t).then(a).catch(p)}function r(t){function a(e){return e.data&&e.data.http_status_code&&g.error(e.data.message),e.data}return e.post(v+"/users",t).then(a).catch(p)}function n(t,a){function s(e){return e.data}return e.put(v+"/users/"+t,a).then(s).catch(p)}function c(t,a){function s(e){return e.data}return e.post(v+"/users/"+t+"/recharge",a).then(s).catch(p)}function o(t,a){function s(e){return e.data}var i=l(a),r=v+"/users/"+t+"/transactions"+i;return e.get(r).then(s).catch(p)}function l(e){var t;if(e){t="?";for(var a in e)e.hasOwnProperty(a)&&(t+=a+"="+e[a]+"&");t=t.slice(0,-1)}return t}function u(e){return(m||d()).then(function(){return t.all(e)}).catch(p)}function d(){function e(){f=!0}return m=t.when(!0).then(e)}function p(){g.error("Sorry, but something went wrong")}var m,v=a.get("baseUrl"),g=a.get("toastr"),f=!1;return{getUsers:s,getOneUser:i,createUser:r,updateUser:n,createRecharge:c,getTransactions:o,ready:u}}e.$inject=["$http","$q","$injector"],angular.module("app.core").factory("dataservice",e)}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"detail",config:{url:"/user?id",templateUrl:"src/app/detail/detail.html",controller:"Detail",controllerAs:"vm"}}]}angular.module("app.detail").run(e),e.$inject=["statehelper"]}(),function(){"use strict";function e(e,t,a,s){function i(){return l.errorsRecharge=[],l.newRecharge.amount||l.errorsRecharge.push({message:"Amount is required!"}),l.newRecharge.comment||l.errorsRecharge.push({message:"Comment is required!"}),!(l.errorsRecharge.length>0)&&(l.isLoadingRecharge=!0,e.createRecharge(t.id,l.newRecharge).then(function(e){l.user.balance=e.amount,n(),l.user.wallet_currency||r()}).finally(function(){l.isLoadingRecharge=!1}))}function r(){return c()}function n(){l.newRecharge={amount:"",comment:""}}function c(){return l.isLoading=!0,e.getOneUser(t.id).then(function(e){l.user=e}).finally(function(){l.isLoading=!1})}function o(t){l.errors=[];var i=s.get("emailRegexp");return t.email.length>0&&(i.test(t.email)||l.errors.push({message:"Invalid email"})),t.user_id||l.errors.push({message:"ID is required!"}),!(l.errors.length>0)&&(l.isLoading=!0,l.id?e.updateUser(t.user_id,t).finally(function(){l.isLoading=!1}):e.createUser(t).then(function(e){e||a.go("detail",{id:t.user_id})}).finally(function(){l.isLoading=!1}))}var l=this;s.get("toastr");l.user={user_id:"",user_name:"",user_custom:"",email:""},l.isLoading=!1,void 0!==t.id&&(l.id=t.id,r()),l.submitUser=o,l.submitRecharge=i,n()}e.$inject=["dataservice","$stateParams","$state","$injector"],angular.module("app.detail").controller("Detail",e)}(),function(){"use strict";function e(){this.config={},this.$get=function(){return{config:this.config}}}function t(e,t,a,s){function i(e){e.forEach(function(e){e.config.resolve=angular.extend(e.config.resolve||{},s.config.resolveAlways),n.state(e.state,e.config)}),c.otherwise(function(){a.go("user-list")})}function r(){t.$on("$stateChangeError",function(){a.go("user-list")})}var n=s.config.$stateProvider,c=s.config.$urlRouterProvider,o={configureStates:i};return function(){r()}(),o}angular.module("app.router").provider("statehelperConfig",e).factory("statehelper",t),t.$inject=["$location","$rootScope","$state","statehelperConfig"]}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"transactions",config:{url:"/user/transactions?id",templateUrl:"src/app/transactions/transactions.html",controller:"Transactions",controllerAs:"vm"}}]}angular.module("app.transactions").run(e),e.$inject=["statehelper"]}(),function(){"use strict";function e(e,t,a,s){function i(){o()}function r(){var e=$("#rangeStart"),t=$("#rangeEnd");e.calendar({type:"date",monthFirst:!1,firstDayOfWeek:1,endCalendar:t,onChange:l.changeStartDate}),t.calendar({type:"date",monthFirst:!1,firstDayOfWeek:1,startCalendar:e,onChange:l.changeEndDate})}function n(e){l.params.datetimeFrom=u(e).utc(!0).startOf("day")}function c(e){l.params.datetimeTo=u(e).utc(!0).endOf("day")}function o(){var t=l.params.datetimeTo.format(),a=l.params.datetimeFrom.format(),s=l.params.transType,i={datetime_from:a,datetime_to:t};s&&(i.transaction_type=s),l.isLoading=!0,e.getTransactions(l.id,i).then(function(e){var t=e;t.length?l.transactions=t.map(function(e){return e.dateFormated=u(e.date).utc(!1).format(d),e}):l.transactions=[]}).finally(function(){l.isLoading=!1,r(),$(".dropdown").dropdown()})}var l=this,u=s.get("moment"),d=s.get("transDateTimeFormat");l.id=t.id,l.reloadTrans=i,l.changeStartDate=n,l.changeEndDate=c,function(){l.params={datetimeFrom:u().subtract(7,"days").utc(!1).startOf("day"),datetimeTo:u().utc(!1).endOf("day"),transType:null},l.types=s.get("transTypes"),o()}()}e.$inject=["dataservice","$stateParams","$document","$injector"],angular.module("app.transactions").controller("Transactions",e)}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"user-list",config:{url:"/users",templateUrl:"src/app/users/users.html",controller:"Users",controllerAs:"vm"}}]}angular.module("app.users").run(e),e.$inject=["statehelper"]}(),function(){"use strict";function e(e,t){function a(t){e.get("$state").go("detail",{id:t})}function s(e){o.pageParams.offset=0,o.pageParams.limit=e,r()}function i(e){o.pageParams.offset=e*o.pageParams.limit,r()}function r(){return n()}function n(){return o.isLoading=!0,t.getUsers(o.pageParams).then(function(e){o.users=e.data;var t=Math.ceil(e.recordsTotal/o.pageParams.limit),a=o.pageParams.offset/o.pageParams.limit+1;return o.currentPage=a,o.pages=c(t,a),o.users}).finally(function(){o.isLoading=!1})}function c(e,t){for(var a,s=t-2,i=t+2+1,r=[],n=[],c=1;c<=e;c++)(1===c||c===e||c>=s&&c<i)&&r.push(c);return r.forEach(function(e){a&&(e-a==2?n.push(a+1):e-a!=1&&n.push("...")),n.push(e),a=e}),n}var o=this;o.users=[],o.perPageChoices=[5,10,15],o.pages=[],o.pageParams={limit:o.perPageChoices[0],offset:0},o.selectPerPage=s,o.setPage=i,o.openUser=a,r()}e.$inject=["$injector","dataservice"],angular.module("app.users").controller("Users",e)}(),function(){"use strict";function e(e){function t(t,a){t.$watch("loading",function(s){e(function(){t.$apply(function(){var e="true"===s;a.toggleClass("active",e)})})})}return{restrict:"EA",template:'<div class="ui inverted dimmer"><div class="ui loader"></div></div>',replace:!0,scope:{loading:"@"},link:t}}e.$inject=["$timeout"],angular.module("app.widgets").directive("loader",e)}(),angular.module("app.core").run(["$templateCache",function(e){e.put("src/app/index.html",'<!doctype html><html data-ng-app=app ng-strict-di><head><meta charset=utf-8><title>User wallets</title><link rel="shortcut icon" href=favicon.ico type=image/x-icon><link rel=stylesheet href=/bower_components/semantic-ui-calendar/dist/calendar.min.css><link rel=stylesheet href=/bower_components/semantic/dist/semantic.min.css><link rel=stylesheet href=/bower_components/toastr/toastr.min.css><link rel=stylesheet href=styles/main.css><link rel=stylesheet href=css/vendor.min.css><link rel=stylesheet href=css/main.min.css></head><body><div class="main ui"><h1 class="ui dividing centered header">User wallets</h1><div ui-view></div></div><script type=text/javascript src=/bower_components/jquery/dist/jquery.min.js></script><script type=text/javascript src=/bower_components/angular/angular.min.js></script><script type=text/javascript src=/bower_components/angular-ui-router/release/angular-ui-router.min.js></script><script type=text/javascript src=/bower_components/moment/moment.js></script><script type=text/javascript src=/bower_components/semantic-ui-calendar/dist/calendar.min.js></script><script type=text/javascript src=/bower_components/semantic/dist/semantic.min.js></script><script type=text/javascript src=/bower_components/toastr/toastr.min.js></script><script type=text/javascript src=/src/app/app.module.js></script><script type=text/javascript src=/src/app/users/config.route.js></script><script type=text/javascript src=/src/app/users/users.js></script><script type=text/javascript src=/src/app/users/users.module.js></script><script type=text/javascript src=/src/app/transactions/config.route.js></script><script type=text/javascript src=/src/app/transactions/transactions.js></script><script type=text/javascript src=/src/app/transactions/transactions.module.js></script><script type=text/javascript src=/src/app/detail/config.route.js></script><script type=text/javascript src=/src/app/detail/detail.js></script><script type=text/javascript src=/src/app/detail/detail.module.js></script><script type=text/javascript src=/src/app/core/config.js></script><script type=text/javascript src=/src/app/core/constants.js></script><script type=text/javascript src=/src/app/core/core.module.js></script><script type=text/javascript src=/src/app/core/dataservice.js></script><script type=text/javascript src=/src/app/router/router.module.js></script><script type=text/javascript src=/src/app/router/routerhelper.js></script><script type=text/javascript src=js/vendor.min.js></script><script type=text/javascript src=js/app.min.js></script></body></html>'),e.put("src/app/detail/detail.html",'<div class="ui container"><div class="ui stackable two column grid"><div class=row><button class="ui button" ui-sref=user-list>Back to all users</button></div><div class=row><div class="eight wide column"><div class="ui segment"><h3 class="ui header" ng-if=!vm.id>Create new user</h3><h3 class="ui header" ng-if=vm.id>Update user</h3><form class="ui form" ng-submit=vm.submitUser(vm.user) novalidate><div class=field><label>User ID</label> <input ng-disabled=vm.id ng-model=vm.user.user_id type=text name=user-id placeholder="User ID"></div><div class=field><label>User Name</label> <input ng-model=vm.user.user_name type=text name=user-name placeholder="User Name"></div><div class=field><label>Custom parameter for user identification</label> <input type=text name=parameter ng-model=vm.user.user_custom placeholder="Custom parameter for user identification"></div><div class=field><label>Email</label> <input ng-model=vm.user.email type=text name=email placeholder=Email></div><div class=field ng-if=vm.id><div class="ui checkbox"><input type=checkbox name=enabled title=Enabled ng-model=vm.user.enabled> <label>Enabled</label></div></div><button class="ui positive button" type=submit ng-if=vm.id ng-disabled=vm.isLoading>Update</button> <button class="ui positive button" type=submit ng-if=!vm.id ng-disabled=vm.isLoading>Create</button></form><loader loading="{{ vm.isLoading }}"></loader><div ng-repeat="error in vm.errors" class="ui negative message"><div ng-if=error.header class=header>{{ error.header }}</div><p>{{ error.message }}</p></div></div></div><div class="eight wide column" ng-if=vm.id><div class="ui grid"><div class=row><div class="sixteen wide column"><div class="ui segment"><div class="ui horizontal tiny statistics"><div class="ui statistic"><div class=value>{{ vm.user.register_date | date : "dd/MM/yyyy" }}</div><div class=label>Register date</div></div><div class=statistic ng-if=vm.user.wallet_currency><div class=value>{{ vm.user.wallet_currency }}</div><div class=label>Currency</div></div><div class=statistic><div class=value>{{ vm.user.balance }}</div><div class=label>Balance</div></div><div class=statistic><div class=value>{{ vm.user.wallet_amount }}</div><div class=label>Wallet Amount</div></div></div><button class="ui positive button" ui-sref="transactions({ id: vm.user.user_id })">Show transactions</button><loader loading="{{ vm.isLoading }}"></loader></div></div></div><div class=row><div class="sixteen wide column"><div class="ui segment"><form ng-submit=vm.submitRecharge() class="ui form" novalidate><div class=field><label>Amount</label> <input type=number name=amount ng-model=vm.newRecharge.amount placeholder=Amount></div><div class=field><label>Comment</label> <input type=text ng-model=vm.newRecharge.comment name=comment placeholder=Comment></div><button class="ui positive button" type=submit ng-disabled=vm.isLoadingRecharge>New recharge</button><loader loading="{{ vm.isLoadingRecharge }}"></loader></form><div ng-repeat="error in vm.errorsRecharge" class="ui negative message"><div ng-if=error.header class=header>{{ error.header }}</div><p>{{ error.message }}</p></div></div></div></div></div></div></div></div></div>'),e.put("src/app/transactions/transactions.html",'<div class="ui container"><div class="ui grid"><div class=row><button class="ui button" ui-sref="detail({ id: vm.id })">Back to profile</button></div><div class=row><div class="ui segment"><div class="ui middle aligned selection divided list"><h3>Range</h3><form class="ui form" ng-submit=vm.reloadTrans()><div class="three fields"><div class=field><label>Start date</label><div class="ui calendar" id=rangeStart><div class="ui input left icon"><i class="calendar icon"></i> <input type=text value="{{ vm.params.datetimeFrom }}"></div></div></div><div class=field><label>End date</label><div class="ui calendar" id=rangeEnd><div class="ui input left icon"><i class="calendar icon"></i> <input type=text value="{{ vm.params.datetimeTo }}"></div></div></div><div class=field><label>Type</label><select class="ui search selection dropdown" ng-model=vm.params.transType ng-init="vm.params.transType = vm.params.transType || vm.types[0].value" ng-options="type.value as type.name for type in vm.types"></select></div></div><button class="ui button">Reload</button></form><table class="ui single striped line table"><thead><tr><th>Date (UTC)</th><th>Operation ID</th><th>Transaction ID</th><th>Coupon ID</th><th>Coupon Code</th><th>Transaction Type</th><th>Comment</th><th>Amount</th><th>Sum</th><th>Currency</th><th>Status</th></tr></thead><tbody><tr ng-repeat="transaction in vm.transactions"><td>{{ transaction.dateFormated }}</td><td>{{ transaction.operation_id }}</td><td>{{ transaction.transaction_id }}</td><td>{{ transaction.coupon_id }}</td><td>{{ transaction.coupon_code }}</td><td>{{ transaction.transaction_type }}</td><td>{{ transaction.comment }}</td><td>{{ transaction.amount }}</td><td>{{ transaction.sum }}</td><td>{{ transaction.currency }}</td><td>{{ transaction.status }}</td></tr></tbody></table><loader loading="{{ vm.isLoading }}"></loader><div ng-if="vm.transactions == 0" class="ui warning message"><div class=header>No transactions</div></div></div></div></div></div></div>'),e.put("src/app/users/users.html",'<div class="ui main text container"><div class="ui grid"><div class="left aligned eight wide column"><button class="ui button" ui-sref=detail>Create new user</button></div><div class="right aligned eight wide column"><div class="ui compact menu"><div class="ui simple dropdown item">{{ vm.pageParams.limit }} users per page <i class="dropdown icon"></i><div class=menu><div class=item ng-if="choice != vm.pageParams.limit" ng-click=vm.selectPerPage(choice) ng-repeat="choice in vm.perPageChoices">{{ choice }}</div></div></div></div></div></div><div class="ui divided list segment user-list"><div class=item ng-repeat="user in vm.users"><div class="ui grid"><div class="left aligned six wide column"><div class=header>{{ user.user_name }} {{ user.user_custom ? \'(\' + user.user_custom + \')\' : \'\' }}</div><div class=meta><a ng-if=user.email href=mailto:{{this.props.email}}>{{ user.email }}</a><br ng-if=user.email><span class=date>Register date: {{ user.register_date | date : "dd/MM/yyyy" }}</span></div></div><div class="left aligned six wide column"><div class=meta><span>Currency: {{ user.wallet_currency ? user.wallet_currency : \'not set\' }}</span><br><span>Balance: {{ user.balance }}</span><br><span>Wallet Amount: {{ user.wallet_amount }}</span></div></div><div class="right aligned four wide column"><button class="ui button" ng-click=vm.openUser(user.user_id)>View profile</button></div></div></div><loader loading="{{ vm.isLoading }}"></loader></div><div class="ui pagination menu" ng-if="vm.pages.length > 1"><a class=item ng-class="{ active: page == vm.currentPage, disabled: page == \'...\' }" ng-click="vm.setPage(page - 1)" ng-repeat="page in vm.pages track by $index">{{ page }} {{ page.isInteger() }}</a></div></div>')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
