"use strict";var walletsApp=angular.module("walletsApp",["ui.router","userList","userDetail","templates"]);walletsApp.config(["$stateProvider","$locationProvider","$routeProvider",function(e,t,r){r.when("/users",{template:"<user-list></user-list>"}).when("/users/:userId",{template:"<user-detail></user-detail>"}).otherwise("/users")}]),angular.module("userList",["core.user"]),angular.module("userList").component("userList",{templateUrl:"user-list/user-list.template.html",controller:["User","$location",function(e,t){var r=this,n={limit:2,offset:0};r.isLoading=!0,e(n,function(e){r.users=e.data.data,r.isLoading=!1},function(){r.isLoading=!1}),r.openUser=function(e){t.path("/users/"+e)}}]}),angular.module("userDetail",["ngRoute","core.user"]),angular.module("userDetail").component("userDetail",{templateUrl:"user-detail/user-detail.template.html",controller:["UserOperations","$routeParams",function(e,t){var r=this;r.userId=t.userId;var n={datetime_from:"2015-01-01T00:00:00 UTC",datetime_to:"2017-03-03T00:00:00 UTC"};r.isLoading=!0,e(this.userId,n,function(e){r.isLoading=!1,r.transactions=e.data},function(){r.isLoading=!1})}]}),angular.module("core.user",["core-api"]),angular.module("core.user").factory("User",["api","$http",function(e,t){return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e(t).getList("/users",r,n,u)}}]).factory("UserOperations",["api","$http",function(e,t){return function(r,n){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return e(t).getList("/users/"+r+"/transactions",n,u,i)}}]),angular.module("core-api",[]),angular.module("core-api").factory("api",[function(){var e="https://livedemo.xsolla.com/fe/test-task/baev";return function(t){function r(e,t,r){return t&&r?e.then(function(e){t(e)},function(e){e(e)}):r?e.then(function(e){e(e)}):t?e.then(function(e){t(e)}):e}function n(n){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="";if(u){o="?";for(var s in u)u.hasOwnProperty(s)&&(o+=s+"="+u[s]+"&");o=o.slice(0,-1)}var l=t.get(e+n+o);return r(l,i,a)}function u(n,u,i,a){u||(u={});var o=t.put(e+n,u);return r(o,i,a)}function i(n,u,i,a){var o=t.post(e+n,u);return r(o,i,a)}return{update:u,create:i,getList:n}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
