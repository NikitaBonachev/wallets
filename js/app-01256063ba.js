"use strict";var walletsApp=angular.module("walletsApp",["ui.router","userList","userTransactions","userDetail","templates"]);walletsApp.config(["$stateProvider","$locationProvider","$urlRouterProvider",function(e,r,t){e.state("user-list",{url:"/users",templateUrl:"controllers/user-list/UserListTemplate.html",controllerAs:"$ctrlUserList",controller:"UserListCtrl"}),e.state("user-detail",{url:"/user?id",templateUrl:"controllers/user-detail/UserDetailTemplate.html",controllerAs:"$ctrlDetail",controller:"UserDetailCtrl"}),e.state("user-transactions",{url:"/user/transactions?id",templateUrl:"controllers/user-transactions/UserTransactionsTemplate.html",controllerAs:"$ctrlUserTransactions",controller:"UserTransactionsCtrl"}),t.otherwise(function(e){var r=e.get("$state");r.go("user-list")})}]),walletsApp.run(["$rootScope","$location",function(e,r){e.$on("$locationChangeSuccess",function(){e.currentUrl=r.url()})}]);var userListCtrl=angular.module("userList",["core.user"]);userListCtrl.controller("UserListCtrl",["Users","$location","$injector",function(e,r,t){function a(){n.isLoading=!0,e(n.paginationsParams,function(e){n.users=e.data.data,n.isLoading=!1,n.pages=Math.ceil(e.data.recordsTotal/n.paginationsParams.limit)},function(){n.isLoading=!1})}var n=this;n.perPageChoices=[5,10,15],n.pages=0,n.paginationsParams={limit:n.perPageChoices[0],offset:0},a(),n.selectPerPage=function(e){n.paginationsParams.offset=0,n.paginationsParams.limit=e,a()},n.setPage=function(e){n.paginationsParams.offset=e,a()},n.openUser=function(e){var r=t.get("$state");r.go("user-detail",{id:e})},n.getPages=function(){return new Array(n.pages)}}]),angular.module("userEdit",["ui.router","core.user"]);var emailRegexp=new RegExp(["^","(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*",'|"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]','|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")',"@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}","(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:","(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]","|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)","\\])","$"].join(""));angular.module("userEdit").component("userEdit",{templateUrl:"controllers/user-edit/UserEditTemplate.html",controllerAs:"$ctrlEdit",controller:["CreateUser","UpdateUser","OneUser","$stateParams","$location",function(e,r,t,a,n){var s=this;s.user={user_id:"",user_name:"",user_custom:"",email:""},a.id&&(s.userId=a.id,s.isLoading=!0,t(s.userId,function(e){s.user=e.data,s.isLoading=!1},function(){s.isLoading=!1})),s.submitUser=function(t){s.errors=[],t.email.length>0&&(emailRegexp.test(t.email)||s.errors.push({message:"Invalid email"})),t.user_id||s.errors.push({message:"ID is required!"}),s.errors.length>0||(s.isLoading=!0,s.userId?r(s.userId,t,function(e){s.isLoading=!1,e.data&&204!=e.data.http_status_code&&s.errors.push({message:e.data.message})},function(e){s.errors.push({message:e.message}),s.isLoading=!1}):e(t,function(e){s.isLoading=!1,e.data?204!=e.data.http_status_code&&s.errors.push({message:e.data.message}):n.path("/users/edit/"+t.user_id)},function(e){s.errors.push({message:e.message}),s.isLoading=!1}))}}]});var userDetailCtrl=angular.module("userDetail",["ui.router","userEdit","userInfo","newRecharge"]);userDetailCtrl.controller("UserDetailCtrl",["$stateParams",function(e){var r=this;e.id&&(r.id=e.id)}]),angular.module("userInfo",["ui.router","core.user"]),angular.module("userInfo").component("userInfo",{templateUrl:"controllers/user-info/UserInfoTemplate.html",controllerAs:"$ctrlInfo",controller:["OneUser","$stateParams",function(e,r){var t=this;t.user={},t.userId=r.id,t.isLoading=!0,e(t.userId,function(e){t.user=e.data,t.isLoading=!1},function(){t.isLoading=!1})}]});var userTransactionsCtrl=angular.module("userTransactions",["ui.router","transactionList"]);userTransactionsCtrl.controller("UserTransactionsCtrl",["$stateParams",function(e){var r=this;r.id=e.id}]),angular.module("transactionList",["ui.router","core.user"]),angular.module("transactionList").component("transactionList",{templateUrl:"controllers/transaction-list/TransactionListTemplate.html",controllerAs:"$ctrlTransactionList",controller:["UserTransactions","$stateParams",function(e,r){var t=this;t.userId=r.id;var a={datetime_from:"2015-01-01T00:00:00 UTC",datetime_to:"2017-03-03T00:00:00 UTC"};t.isLoading=!0,e(t.userId,a,function(e){t.isLoading=!1,t.transactions=e.data},function(){t.isLoading=!1})}]}),angular.module("newRecharge",["ui.router","core.user"]),angular.module("newRecharge").component("newRecharge",{templateUrl:"controllers/new-recharge/NewRechargeTemplate.html",controllerAs:"$ctrlNewRecharge",controller:["NewRecharge","$stateParams",function(e,r){var t=this;t.userId=r.id,t.newTransaction={amount:"",comment:""},t.submitRecharge=function(r){t.errors=[],t.errors.length>0||(t.isLoading=!0,e(t.userId,r,function(e){t.isLoading=!1,e.data&&(e.data.amount||t.errors.push({message:e.data.message}))},function(e){t.errors.push({message:e.message}),t.isLoading=!1}))}}]}),angular.module("core.user",["core-api"]),angular.module("core.user").factory("Users",["api","$http",function(e,r){return function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e(r).get("/users",t,a,n)}}]).factory("OneUser",["api","$http",function(e,r){return function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e(r).get("/users/"+t,null,a,n)}}]).factory("UpdateUser",["api","$http",function(e,r){return function(t,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return e(r).update("/users/"+t,a,n,s)}}]).factory("CreateUser",["api","$http",function(e,r){return function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e(r).create("/users",t,a,n)}}]).factory("NewRecharge",["api","$http",function(e,r){return function(t,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return e(r).create("/users/"+t+"/recharge",a,n,s)}}]).factory("UserTransactions",["api","$http",function(e,r){return function(t,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return e(r).get("/users/"+t+"/transactions",a,n,s)}}]),angular.module("core-api",[]),angular.module("core-api").factory("api",[function(){var e="https://livedemo.xsolla.com/fe/test-task/baev";return function(r){function t(e,r,t){return r&&t?e.then(function(e){r(e)},function(e){e(e)}):t?e.then(function(e){e(e)}):r?e.then(function(e){r(e)}):e}function a(a){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i="";if(n){i="?";for(var u in n)n.hasOwnProperty(u)&&(i+=u+"="+n[u]+"&");i=i.slice(0,-1)}var l=r.get(e+a+i);return t(l,s,o)}function n(a,n,s,o){n||(n={});var i=r.put(e+a,n);return t(i,s,o)}function s(a,n,s,o){var i=r.post(e+a,n);return t(i,s,o)}return{update:n,create:s,get:a}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
