"use strict";var walletsApp=angular.module("walletsApp",["ui.router","userList","userDetail","templates"]);walletsApp.config(["$stateProvider","$locationProvider","$routeProvider","$injector",function(e,t,r,n){var a=n.get("$templateCache");e.state("users.list",{url:"/users",template:a.get("user-detail/user-detail.template.html"),controller:"userList",controllerAs:"$ctrl"})}]),angular.module("userList",["core.user"]);var $injector=angular.injector(["ng"]),$templateCache=$injector.get("$templateCache");console.log($templateCache.get("user-detail/user-detail.template.html")),angular.module("userList").component("userList",{template:$templateCache.get("user-detail/user-detail.template.html"),controller:["User","$location","$templateCache",function(e,t,r){console.log(r.get("user-detail/user-detail.template.html"));var n=this,a={limit:4,offset:0};n.isLoading=!0,e(a,function(e){n.users=e.data.data,n.isLoading=!1},function(){n.isLoading=!1}),n.openUser=function(e){t.path("/users/"+e)}}]}),angular.module("userDetail",["ngRoute","core.user"]),angular.module("userDetail").component("userDetail",{templateUrl:"user-detail.template.html",controller:["UserOperations","$routeParams",function(e,t){var r=this;r.userId=t.userId;var n={datetime_from:"2015-01-01T00:00:00 UTC",datetime_to:"2017-03-03T00:00:00 UTC"};r.isLoading=!0,e(this.userId,n,function(e){r.isLoading=!1,r.transactions=e.data},function(){r.isLoading=!1})}]}),angular.module("core.user",["core-api"]),angular.module("core.user").factory("User",["api","$http",function(e,t){return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e(t).getList("/users",r,n,a)}}]).factory("UserOperations",["api","$http",function(e,t){return function(r,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return e(t).getList("/users/"+r+"/transactions",n,a,l)}}]),angular.module("core-api",[]),angular.module("core-api").factory("api",[function(){var e="https://livedemo.xsolla.com/fe/test-task/baev";return function(t){function r(e,t,r){return t&&r?e.then(function(e){t(e)},function(e){e(e)}):r?e.then(function(e){e(e)}):t?e.then(function(e){t(e)}):e}function n(n){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,u="";if(a){u="?";for(var i in a)a.hasOwnProperty(i)&&(u+=i+"="+a[i]+"&");u=u.slice(0,-1)}var s=t.get(e+n+u);return r(s,l,o)}function a(n,a,l,o){a||(a={});var u=t.put(e+n,a);return r(u,l,o)}function l(n,a,l,o){var u=t.post(e+n,a);return r(u,l,o)}return{update:a,create:l,getList:n}}}]);
//# sourceMappingURL=data:application/json;base64,